name: Check, build, and test

on:
  push:
    branches: ["main"]
    # This workflow is definitely expensive for GitHub,
    # so let's not let files that won't affect the project's ability to build and test trigger it
    paths-ignore:
      - ".github/**"
      - "**/.gitignore"
      - "**/CHANGELOG.md"
      - "**/README.md"
      - "**/LICENSE-*"
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  formatting-and-deny:
    name: Check formatting and cargo-deny
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install stable Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Formatting
        run: cargo fmt --check --verbose

      - name: cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v2

  check-and-build:
    strategy:
      matrix:
        minimal_or_latest:
          - build_command: cargo minimal-versions build --direct --verbose
            cache_key: minimal
            check_command: cargo minimal-versions check --direct --verbose
            job_name_suffix: with minimal versions of direct dependencies

          - build_command: cargo build --verbose
            cache_key: latest
            check_command: cargo check --verbose
            job_name_suffix: (with latest (typically) versions of dependencies)

        supporteds:
          - runner: macos-latest
            target: aarch64-apple-darwin

          - runner: macos-latest
            target: x86_64-apple-darwin

          - install_prerequisite: sudo apt-get update && sudo apt-get install musl-dev musl-tools gcc-aarch64-linux-gnu g++-aarch64-linux-gnu && sudo ln -s /bin/g++ /bin/musl-g++
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu

          - install_prerequisite: sudo apt-get update && sudo apt-get install musl-dev musl-tools gcc-aarch64-linux-gnu g++-aarch64-linux-gnu && sudo ln -s /bin/g++ /bin/musl-g++
            runner: ubuntu-latest
            target: aarch64-unknown-linux-musl

          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - install_prerequisite: sudo apt-get update && sudo apt-get install musl-dev musl-tools && sudo ln -s /bin/g++ /bin/musl-g++
            runner: ubuntu-latest
            target: x86_64-unknown-linux-musl

          # I would like to support this but I don't know how to install the dependencies to be able to
          # - runner: windows-latest
          #   target: aarch64-pc-windows-gnullvm

          - runner: windows-latest
            target: aarch64-pc-windows-msvc

          # I don't think supporting this is up to me
          # I forgot where I learned this, but
          # I don't think I can use a non-Rust dependency (i.e. llama.cpp) here
          # - runner: windows-latest
          #   target: x86_64-pc-windows-gnu

          - runner: windows-latest
            target: x86_64-pc-windows-msvc
    name: Check and build ${{ matrix.supporteds.target }} (on ${{ matrix.supporteds.runner }}) ${{ matrix.minimal_or_latest.job_name_suffix }}
    runs-on: ${{ matrix.supporteds.runner }}
    timeout-minutes: 5
    env:
      # https://github.com/rust-lang/stacker/issues/80#issuecomment-1547991131
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc # TODO: shouldn't this be something to do with musl, not gcc?
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install prerequisite build chain
        if: matrix.supporteds.install_prerequisite
        run: ${{ matrix.supporteds.install_prerequisite }}

      - name: Install stable Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.supporteds.target }}

      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - name: Install cargo-minimal-versions
        uses: taiki-e/install-action@cargo-minimal-versions

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.supporteds.target }}-${{ matrix.minimal_or_latest.cache_key }}
          cache-on-failure: "true"

      - name: Check
        run: ${{ matrix.minimal_or_latest.check_command }} --target ${{ matrix.supporteds.target }}

      - name: Build
        run: ${{ matrix.minimal_or_latest.build_command }} --target ${{ matrix.supporteds.target }}

  test:
    strategy:
      matrix:
        supporteds:
          - runner: macos-latest
            target: aarch64-apple-darwin

          - runner: macos-latest
            target: x86_64-apple-darwin

          # Not able to be tested in GitHub Actions (without emulation, at least)
          # - runner: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu

          # Not able to be tested in GitHub Actions (without emulation, at least)
          # - runner: ubuntu-latest
          #   target: aarch64-unknown-linux-musl

          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - install_prerequisite: sudo apt-get update && sudo apt-get install musl-dev musl-tools && sudo ln -s /bin/g++ /bin/musl-g++
            runner: ubuntu-latest
            target: x86_64-unknown-linux-musl

          # Not able to be tested in GitHub Actions (without emulation, at least)
          # - runner: windows-latest
          #   target: aarch64-pc-windows-gnullvm

          # Not able to be tested in GitHub Actions (without emulation, at least)
          # - runner: windows-latest
          #   target: aarch64-pc-windows-msvc

          # I don't think supporting this is up to me
          # I forgot where I learned this, but
          # I don't think I can use a non-Rust dependency (i.e. llama.cpp) here
          # - runner: windows-latest
          #   target: x86_64-pc-windows-gnu

          - runner: windows-latest
            target: x86_64-pc-windows-msvc
    name: Test ${{ matrix.supporteds.target }} (on ${{ matrix.supporteds.runner }})
    runs-on: ${{ matrix.supporteds.runner }}
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install prerequisite build chain
        if: matrix.supporteds.install_prerequisite
        run: ${{ matrix.supporteds.install_prerequisite }}

      - name: Install stable Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.supporteds.target }}

      - name: Install Nextest
        uses: taiki-e/install-action@cargo-nextest

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.supporteds.target }}-latest
          cache-on-failure: "true"

      - name: Test
        run: cargo nextest run --target ${{ matrix.supporteds.target }}

  msrv:
    strategy:
      matrix:
        crate_directory:
          - ./core
          - ./cli-clap
          - ./gui-eframe
          - ./tui-ratatui
          - ./multibinary

        supporteds:
          - runner: macos-latest
            target: aarch64-apple-darwin

          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - runner: windows-latest
            target: x86_64-pc-windows-msvc
    name: Verify MSRV of ${{ matrix.crate_directory }} for ${{ matrix.supporteds.target }} (on ${{ matrix.supporteds.runner }})
    runs-on: ${{ matrix.supporteds.runner }}
    timeout-minutes: 4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.supporteds.target }}-latest-variable
          cache-on-failure: "true"

      - name: Delete existing cargo stuff
        run: rm -rf ~/.cargo/bin

      - name: Install cargo-msrv
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-msrv

      - name: Verify declared MSRV (minimum supported Rust version)
        run: cargo-msrv verify --output-format json
        working-directory: ${{ matrix.crate_directory }}
