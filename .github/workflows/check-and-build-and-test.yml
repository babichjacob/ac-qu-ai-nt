name: Check, build, and test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  formatting:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install stable Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Formatting
        run: cargo fmt --check --verbose

  check-and-build:
    strategy:
      matrix:
        supporteds:
          - runner: macos-latest
            target: aarch64-apple-darwin

          - runner: macos-latest
            target: x86_64-apple-darwin

          - install_prerequisite: sudo apt-get update && sudo apt-get install gcc-aarch64-linux-gnu
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu

          - install_prerequisite: sudo apt-get update && sudo apt-get install gcc-aarch64-linux-gnu
            runner: ubuntu-latest
            target: aarch64-unknown-linux-musl

          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - runner: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - runner: windows-latest
            target: aarch64-pc-windows-gnullvm

          - runner: windows-latest
            target: aarch64-pc-windows-msvc

          - runner: windows-latest
            target: x86_64-pc-windows-gnu

          - runner: windows-latest
            target: x86_64-pc-windows-msvc
      fail-fast: false # WIP: debugging
    name: Check and build ${{ matrix.supporteds.target }} (on ${{ matrix.supporteds.runner }})
    runs-on: ${{ matrix.supporteds.runner }}
    timeout-minutes: 5
    env:
      # https://github.com/rust-lang/stacker/issues/80#issuecomment-1547991131
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc # TODO: shouldn't this be something to do with musl, not gcc?
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install prerequisite build chain
        if: matrix.supporteds.install_prerequisite
        run: ${{ matrix.supporteds.install_prerequisite }}

      - name: Install stable Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.supporteds.target }}

      - uses: Swatinem/rust-cache@v2

      - name: Check
        run: cargo check --verbose --target ${{ matrix.supporteds.target }}

      - name: Build
        run: cargo build --verbose --target ${{ matrix.supporteds.target }}

  test:
    strategy:
      matrix:
        supporteds:
          - runner: macos-latest
            target: aarch64-apple-darwin

          - runner: macos-latest
            target: x86_64-apple-darwin

          # Not able to be tested in GitHub Actions (without emulation, at least)
          # - runner: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu

          # Not able to be tested in GitHub Actions (without emulation, at least)
          # - runner: ubuntu-latest
          #   target: aarch64-unknown-linux-musl

          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - runner: ubuntu-latest
            target: x86_64-unknown-linux-musl

          # Not able to be tested in GitHub Actions (without emulation, at least)
          # - runner: windows-latest
          #   target: aarch64-pc-windows-gnullvm

          # Not able to be tested in GitHub Actions (without emulation, at least)
          # - runner: windows-latest
          #   target: aarch64-pc-windows-msvc

          - runner: windows-latest
            target: x86_64-pc-windows-gnu

          - runner: windows-latest
            target: x86_64-pc-windows-msvc
    name: Test ${{ matrix.supporteds.target }} (on ${{ matrix.supporteds.runner }})
    runs-on: ${{ matrix.supporteds.runner }}
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install stable Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.supporteds.target }}

      - uses: Swatinem/rust-cache@v2

      - name: Test
        run: cargo nextest run --target ${{ matrix.supporteds.target }}

  minimal-dependencies-check-build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-minimal-versions
        uses: taiki-e/install-action@cargo-hack
      - name: Install cargo-minimal-versions
        uses: taiki-e/install-action@cargo-minimal-versions

      - uses: Swatinem/rust-cache@v2

      - name: Check (minimal direct dependencies)
        run: cargo minimal-versions check --direct --workspace

      - name: Build (minimal direct dependencies)
        run: cargo minimal-versions build --direct --workspace

      - name: Test (minimal direct dependencies)
        run: cargo minimal-versions test --direct --workspace
